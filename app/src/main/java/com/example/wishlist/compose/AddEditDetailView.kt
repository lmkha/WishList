package com.example.wishlist.compose

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.focus.FocusManager
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.input.KeyboardCapitalization
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.wishlist.viewmodels.WishViewModel
import com.example.wishlist.data.Wish

@Composable
fun AddEditDetailView(
    id: Long,
    viewModel: WishViewModel,
    navHostController: NavHostController
) {
    val focusManager = LocalFocusManager.current
    var title by remember {
        mutableStateOf("")
    }
    var description by remember {
        mutableStateOf("")
    }

    if (id != 0L) {
        val wish = viewModel.getWishById(id).collectAsState(initial = null).value
        title = wish?.title ?: ""
        description = wish?.description ?: ""
    }

    Scaffold(
        topBar = {
            TopAppBarView(
                title = if (id == 0L) "Add Wish Item" else "Edit Wish Item",
                isHomeScreen = false
            ) {
                navHostController.navigateUp()
            }
        }
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(it)
                .clickable { focusManager.clearFocus() },
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {

            WishTextField(
                label = "Title",
                value = title,
                focusManager = focusManager,
            ) { newTitle ->
                title = newTitle
            }

            Spacer(modifier = Modifier.height(16.dp))

            WishTextField(
                label = "Description",
                value = description,
                focusManager = focusManager,
            ) { newDescription ->
                description = newDescription
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    if (title.isNotEmpty() && description.isNotEmpty()) {
                        if (id == 0L) {
                            // Id is auto-generated by Room, value 0L will be changed to the actual id
                            viewModel.addWish(Wish(0L, title, description))
                        } else {
                            viewModel.updateWish(Wish(id, title, description))
                        }
                        navHostController.popBackStack()
                    }
                }
            ) {
                Text(
                    text = if (id == 0L) "Add" else "Edit"
                )
            }
        }
    }
}

@Composable
private fun WishTextField(
    label: String,
    value: String,
    focusManager: FocusManager,
    onValueChange: (String) -> Unit
) {
    OutlinedTextField(
        value = value,
        label = { Text(label) },
        onValueChange = { onValueChange(it) },
        keyboardOptions = KeyboardOptions(
            capitalization = KeyboardCapitalization.Sentences,
            keyboardType = KeyboardType.Text,
            imeAction = androidx.compose.ui.text.input.ImeAction.Next
        ),
        keyboardActions = KeyboardActions(
            onNext = {
                val result = focusManager.moveFocus(FocusDirection.Down)
                if (!result) {
                    focusManager.clearFocus()
                }
            }
        ),
        colors = OutlinedTextFieldDefaults.colors(
            focusedBorderColor = Color.Green
        )
    )
}

@Composable
@Preview(showBackground = true)
fun AddEditDetailViewPreview() {
}